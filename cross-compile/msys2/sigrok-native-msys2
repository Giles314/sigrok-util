#!/bin/sh
##
## This file is part of the sigrok-util project.
##
## Copyright (C) 2016-2018 Uwe Hermann <uwe@hermann-uwe.de>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.
##


# Export SIGROK_REPO_BASEURL with the base URL of a repositories where is located sigrok
# This will allow to build from forked repositories of sigrok
# It is not necessary to have forked all the sigrok repositories
# Only the forked repositories will replace sigrok original repositories
# Missing forked repositories will left corresponding original repositoreis in use.
# For example if before calling this build script you execute 
#     export SIGROK_REPO_BASEURL="https://github.com/your-repo-base"
# and you have only forked pulseview repo there, then pulseview
# will be built with https://github.com/your-repo-base/pulseview
# but sill using other repositories from git://sigrok.org

# By default this build procedure rebuilds all from scratch.
# By exporting 1 in SIGROK_INCREMENTAL the procedure will
# rebuild the minimum necessary (obsolete files)

set -e

# The base path prefix where the compiled packages will be installed.
PREFIXBASE=$HOME/sr_msys2

# The base path prefix where to download files to and where to build packages.
BUILDBASE=./build

# The $PREFIX subdir where the libsigrok Python bindings will be installed.
PYBASE=lib/python2.7/site-packages

# Edit this to control verbose build output.
# V="V=1 VERBOSE=1"

# Edit this to enable/disable/modify parallel compiles.
PARALLEL="-j 2"

# Edit this to enable/disable debug builds.
DEBUG=1

# You usually don't need to change anything below this line.

# -----------------------------------------------------------------------------

# Abort if the user runs the script in an "MSYS2 MSYS" shell.
if [ $MSYSTEM = "MSYS" ]; then
	echo "Building in an 'MSYS2 MSYS' shell will not work, aborting."
	echo "Please use the 'MSYS2 MinGW 64-bit' (or 32-bit) shell."
	exit
fi

# The build target type: "i686" (32bit) or "x86_64" (64bit).
# This is selected based on which MSYS2 shell is being used to do the build.
TARGET=$MSYSTEM_CARCH

export FIRMWARE_NAME=sigrok-firmware-fx2lafw
export DOWNLOAD_URL="http://sigrok.org/download/binary"
export VER_SIGROK_FIRMWARE_FX2LAFW=0.1.6

GIT_CLONE="git clone"

# Construct the build and install directory pathnames.
if [ $TARGET = "i686" ]; then
	SUFFIX="32"
else
	SUFFIX="64"
fi
if [ $DEBUG = 1 ]; then
	# CFLAGS/CXXFLAGS contains "-g" per default for autotools projects.
	BUILD_TYPE="Debug"
	PREFIX=$PREFIXBASE"_debug_"$SUFFIX
	BUILDDIR=$BUILDBASE"_debug_"$SUFFIX
else
	BUILD_TYPE="Release"
	PREFIX=$PREFIXBASE"_release_"$SUFFIX
	BUILDDIR=$BUILDBASE"_release_"$SUFFIX
fi

PYPATH=$PREFIX/$PYBASE

PKG_CONFIG_REL=lib/pkgconfig

# Eliminate the host Python path environment variable, if any is set.
export PYTHONPATH=

# -----------------------------------------------------------------------------

P="${PREFIX}/${PKG_CONFIG_REL}:$PKG_CONFIG_PATH"
C="$C --prefix=${PREFIX}"
L="--disable-shared --enable-static"

# Path to Qt binaries (needed for cmake to find the Qt libs).
PATH="/mingw32/qt5-static/bin:$PATH"

W="mingw-w64-$TARGET"

mkdir -p $PYPATH

export COMMON_DIR=$(readlink -e ../common)

# Get LoadConfigureAndMake and CreateBuildDir functions
. ${COMMON_DIR}/cmn-source

CreateBuildDir "${BUILDDIR}"

export MAKE_OPTIONS=$PARALLEL

# -----------------------------------------------------------------------------

if [ "x$1" = "xprepare" ]; then
  # Update package list, install/update all requirements.
  pacman -Sy
  pacman -S \
	autoconf automake autoconf-archive libtool make pkg-config wget patch \
	$W-toolchain $W-glib2 $W-glibmm $W-libusb $W-libftdi $W-check $W-boost \
	$W-libzip $W-doxygen $W-python3 $W-python3-numpy $W-python3-gobject \
	$W-python3-setuptools $W-swig $W-qt5-static $W-cmake $W-nsis \
	$W-hidapi
  exit
fi

# -----------------------------------------------------------------------------

REPO_BASE="https://github.com/libusb"


# libusb
export CONFIG_OPTIONS="${C} ${L}"
SUB_BUILD_DIR="m4"
INSTALL_RULE="${PREFIX}/lib/libusb-1.0.a:${ROOT_BUILD_DIR}/libusb/libusb/.libs/libusb-1.0.a"
LoadConfigureAndMake libusb v1.0.27


REPO_BASE="git://sigrok.org"

# libserialport
SUB_BUILD_DIR="."
INSTALL_RULE="${PREFIX}/lib/libserialport.a:${ROOT_BUILD_DIR}/libserialport/.libs/libserialport.a"
LoadConfigureAndMake libserialport


# libsigrok
export PKG_CONFIG_PATH="${P}"
export CONFIG_OPTIONS="${C} ${L} --disable-python"
export PYTHONPATH="${PYPATH}"
INSTALL_RULE="${PREFIX}/lib/libsigrok.a:${ROOT_BUILD_DIR}/libsigrok/.libs/libsigrok.a"
LoadConfigureAndMake libsigrok


# libsigrokdecode
INSTALL_RULE="${PREFIX}/lib/libsigrokdecode.a:${ROOT_BUILD_DIR}/libsigrokdecode/.libs/libsigrokdecode.a"
export CONFIG_OPTIONS="${C} ${L}"
LoadConfigureAndMake libsigrokdecode


# sigrok-firmware
# Nothing gets cross-compiled here, we just need 'make install' basically.
INSTALL_RULE="${PREFIX}/share/sigrok-firmware/asix-sigma-50.fw:${ROOT_BUILD_DIR}/sigrok-firmware/asix-sigma/asix-sigma-50.fw"
LoadConfigureAndMake sigrok-firmware


# sigrok-firmware-fx2lafw
export FIRMWARE_NAME=sigrok-firmware-fx2lafw
export DOWNLOAD_URL="http://sigrok.org/download/binary"
export PREFIX
make -f ${COMMON_DIR}/DownloadTar.make


# TODO: Doesn't build, libsigrokdecode linking errors.
# # sigrok-cli
# $GIT_CLONE $REPO_BASE/sigrok-cli
# cd sigrok-cli
# ./autogen.sh
# mkdir build
# cd build
# PKG_CONFIG_PATH=$P ../configure $C $L
# $SB make $PARALLEL $V
# make install $V
# # makensis -DHOME=$HOME contrib/sigrok-cli_cross.nsi # TODO
# cd ../..


# PulseView
PKG_CONFIG_PATH=$P 
INSTALL_RULE="${PREFIX}/bin/pulseview.exe:${ROOT_BUILD_DIR}/pulseview/build/pulseview.exe"
LoadConfigureAndMake pulseview

# $SB make test $V # TODO
# makensis -DHOME=$HOME contrib/pulseview_cross.nsi # TODO
#cd ../..
