#!/bin/sh
##
## This file is part of the sigrok-util project.
##
## Copyright (C) 2014 Uwe Hermann <uwe@hermann-uwe.de>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.
##

set -e

# Uncomment/set the following to match your cross-toolchain setup.
# TOOLCHAIN=...
# TOOLCHAIN_TRIPLET=...
# C="--host=$TOOLCHAIN_TRIPLET"
# export PATH=$TOOLCHAIN/bin:$PATH

# The path where the compiled packages will be installed.
PREFIX=$HOME/sr

# The path where to download files to and where to build packages.
BUILDDIR=./build

# The path where the libsigrok Python bindings will be installed.
PYPATH=$PREFIX/lib/python2.7/site-packages

# JDK include path. Usually found automatically, except on FreeBSD.
if [ `uname` = "FreeBSD" ]; then
	JDK="--with-jni-include-path=/usr/local/openjdk7/include"
fi

# Edit this to control verbose build output.
# V="V=1 VERBOSE=1"

# Edit this to enable/disable/modify parallel compiles.
PARALLEL="-j 2"

# Edit this to enable/disable building certain components.
BUILD_SIGROK_FIRMWARE_FX2LAFW=1

# Uncomment the following lines to build with clang and run scan-build.
# export CC=clang
# export CXX=clang++
# SB="scan-build -k -v"

# You usually don't need to change anything below this line.

# -----------------------------------------------------------------------------

P="$PREFIX/lib/pkgconfig"
C="$C --prefix=$PREFIX"

# Create a new build dir if it does not exists
if [ ! -d $BUILDDIR ]; then
  mkdir $BUILDDIR
fi
cd $BUILDDIR

GIT_CLONE="git clone --depth=1"

GIT_CHECK_CHANGES="git fetch"

# The default root for the sigrok GIT repositories
# Define SIGROK_REPO_BASEURL ( export SIGROK_REPO_BASEURL="https://alternate.root/of.repositories" )
# to instead search for forked repositories to develop and compile pull requests
REPO_BASE="git://sigrok.org"

# -----------------------------------------------------------------------------

# LoadAndUpdateDir perform the initial and common part of getting and compiling a repository
# The repository component generation specificities must follow the call to this procedure
# $1: The repository short name
LoadAndUpdateDir() {
  local repo_name="$1"
  local repo_base_url="${SIGROK_REPO_BASEURL:-${REPO_BASE}}"
  local repo_url="${repo_base_url}/${repo_name}"
  
  # Check whether the computed URL is a valid GIT repository
  if ! git ls-remote "${repo_url}" <&- >/dev/null 2>&1 ; then
	  # If not, if it wasn't the default repository fall back to default
	  # (This allows to have only few local repositories keeping default for others)
    if [ ! "${repo_url}" = "${REPO_BASE}" ]; then
	    echo "The repository ${repo_url} does not exist use default ${REPO_BASE}"
		  repo_url="${REPO_BASE}/${repo_name}"
	  fi
  fi
  
  # Verify whether the directory is already a Git repository
  if [ -d "${repo_name}/.git" ]; then
    # Get the local Git Repository's remote repository URL
    cd ${repo_name}
    local remote_url=$(git remote get-url origin 2>/dev/null)

    # This is matching expected repository
    if [ "$remote_url" = "$repo_url" ]; then
      # Do a fech operation to check whether a new change has been missed
      local fetch_result=$(${GIT_CHECK_CHANGES} origin)
	    # Trim any white spaces 
	    fetch_result="${fetch_result#"${fetch_result%%[![:space:]]*}"}"
      if [ -n "$fetch_result" ]; then
        echo -e "\033[33mNew changes exist in repository '${repo_name}'.\033[0m"
      	exit 1
      fi
    else
      echo "The directory '${repo_name}' contains a clone of '${remote_url}' instead of '${repo_url}'"
      exit 1
    fi
  else
    if [ -d ${repo_name} ]; then
      rm -rf ${repo_name}
    fi
    # Clone the repository and add its build directory
    ${GIT_CLONE} "$repo_url" 
    cd ${repo_name}
  fi
  if [ ! -d build ]; then
  	mkdir build
  fi
  if [ -f autogen.sh ]; then
    ./autogen.sh
  fi
  cd build
}


# -----------------------------------------------------------------------------
# libserialport
LoadAndUpdateDir libserialport
$SB ../configure $C
$SB make $PARALLEL $V
make install $V
cd ../..

# libsigrok
LoadAndUpdateDir libsigrok
mkdir -p $PYPATH
PKG_CONFIG_PATH=$P $SB ../configure $C $JDK
$SB make $PARALLEL $V
PYTHONPATH=$PYPATH $SB make install $V
$SB make check $V
cd ../..

# libsigrokdecode
LoadAndUpdateDir libsigrokdecode
PKG_CONFIG_PATH=$P $SB ../configure $C
$SB make $PARALLEL $V
make install $V
$SB make check $V
cd ../..

# sigrok-firmware
LoadAndUpdateDir sigrok-firmware
# Nothing gets cross-compiled here, we just need 'make install' basically.
$SB ../configure $C
make install $V
cd ../..

if [ $BUILD_SIGROK_FIRMWARE_FX2LAFW = 1 ]; then
  # sigrok-firmware-fx2lafw
  LoadAndUpdateDir sigrok-firmware-fx2lafw
  # We're building the fx2lafw firmware on the host, no need to cross-compile.
  $SB ../configure $C
  make $PARALLEL $V
  make install $V
  cd ../..
fi

# sigrok-cli
LoadAndUpdateDir sigrok-cli
if [ `uname` = "FreeBSD" ]; then
	# Temporary fix for: http://sigrok.org/bugzilla/show_bug.cgi?id=552
	PKG_CONFIG_PATH=$P $SB ../configure $C LDFLAGS=-lusb
else
	PKG_CONFIG_PATH=$P $SB ../configure $C
fi
$SB make $PARALLEL $V
make install $V
cd ../..

# PulseView
LoadAndUpdateDir pulseview
PKG_CONFIG_PATH=$P $SB cmake -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX -DDISABLE_WERROR=y -DENABLE_TESTS=y -DCMAKE_EXPORT_COMPILE_COMMANDS=y ..
$SB make $PARALLEL $V
make install $V
$SB make test $V
cd ../..
